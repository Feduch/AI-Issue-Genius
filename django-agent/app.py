import requests
import json
import time
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from llama_cpp import Llama

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class LogAnalyzerService:
    def __init__(self, model_path: str, telegram_bot_token: str, telegram_chat_id: str):
        self.llm = Llama(
            model_path=model_path,
            n_ctx=4096,
            n_threads=8,
            n_gpu_layers=0,
            temperature=0.1,
            top_p=0.9,
            verbose=False
        )
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.api_url = "https://solar.ninja360.ru/api/logs"

    def fetch_django_logs(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Django –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            params = {
                'service': 'django'
            }

            logger.info(f"–ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

            response = requests.get(
                self.api_url,
                params=params,
                timeout=30
            )
            response.raise_for_status()

            logs = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(logs)} –ª–æ–≥–æ–≤ Django")
            return logs

        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return []
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []

    def analyze_log(self, log_data: Dict) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–∏"""
        try:
            error = log_data.get('error')

            prompt = f"""
            [INSTRUCTION]
            –¢—ã ‚Äî AIssueGenius, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—à–∏–±–æ–∫ Django/Python. 
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –æ—à–∏–±–∫—É –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –Ω–∏–∂–µ.
            [/INSTRUCTION]

            [ERROR_DATA]
            –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error.get('message')}
            –¢—Ä–∞—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ Traceback: {error.get('stack_trace')}
            [/ERROR_DATA]
            
            [RESPONSE_FORMAT]
            üîç –ü—Ä–æ–±–ª–µ–º–∞: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]
            
            üéØ –ü—Ä–∏—á–∏–Ω–∞: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞]
            
            üõ†Ô∏è –†–µ—à–µ–Ω–∏–µ:
            - [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ]
            
            üõ°Ô∏è –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞: [1 —Å–æ–≤–µ—Ç]
            [/RESPONSE_FORMAT]
            
            [IMPORTANT]
            - –ú–∞–∫—Å–∏–º—É–º 1000 —Å–ª–æ–≤
            - –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            - –¢–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É
            - –í –∫–∞–∫–æ–º —Ñ–∞–π–ª–µ –∏ –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
            - –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å "üîç –ü—Ä–æ–±–ª–µ–º–∞:"
            [/IMPORTANT]
            
            [SUGGESTION]
            –¢—É—Ç –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∑–∞–∫—Ä—ã–≤ SUGGESTION
            """

            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É Django –∏ –∑–∞–ø–æ–ª–Ω–∏ —à–∞–±–ª–æ–Ω:

            –û–®–ò–ë–ö–ê: {error.get('message')}
            –°–¢–ï–ö: {error.get('stack_trace')}

            –ó–ê–ü–û–õ–ù–ò –≠–¢–û–¢ –®–ê–ë–õ–û–ù:
            üîç –ü—Ä–æ–±–ª–µ–º–∞: [—Å—É—Ç—å –æ—à–∏–±–∫–∏]
            üéØ –ü—Ä–∏—á–∏–Ω–∞: [—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞] 
            üõ†Ô∏è –†–µ—à–µ–Ω–∏–µ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏]
            üõ°Ô∏è –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞: [1 —Å–æ–≤–µ—Ç]

            –§–∞–π–ª –∏ —Å—Ç—Ä–æ–∫–∞: [–∏–∑ —Å—Ç–µ–∫–∞]

            –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å "üîç –ü—Ä–æ–±–ª–µ–º–∞:".
            """

            error = log_data.get('error', {})
            stack_trace = error.get('stack_trace', '')

            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É Django/Python:

            {stack_trace}

            –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–π –æ—à–∏–±–∫–∏. –í–∫–ª—é—á–∏:
            1. –í —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞
            2. –ü–æ—á–µ–º—É –≤–æ–∑–Ω–∏–∫–ª–∞  
            3. –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            4. –ö–∞–∫ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å

            –û—Ç–≤–µ—Ç:
            """

            response = self.llm(
                prompt,
                max_tokens=500,
                temperature=0.1,
                stop=["\n\n", "###"],
                stream=False
            )

            result = response["choices"][0]["text"].strip()

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–≥–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

    def send_telegram_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            max_length = 4000
            messages = [message[i:i + max_length] for i in range(0, len(message), max_length)]

            for i, msg_part in enumerate(messages):
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
                payload = {
                    'chat_id': self.telegram_chat_id,
                    'text': f"–ß–∞—Å—Ç—å {i + 1}/{len(messages)}\n\n{msg_part}",
                    'parse_mode': 'HTML'
                }

                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    def format_analysis_message(self, log_data: Dict, analysis: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        level = log_data.get('level', 'UNKNOWN')
        service = log_data.get('service', 'UNKNOWN')
        timestamp = log_data.get('timestamp', datetime.now().isoformat())

        message = f"""
            üö® <b>–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!</b>
            
            üìÖ <b>–í—Ä–µ–º—è:</b> {timestamp} UTC
            üîß <b>–°–µ—Ä–≤–∏—Å:</b> {service}
            ‚ö° <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}
            
            üìã <b>–î–∞–Ω–Ω—ã–µ –ª–æ–≥–∞:</b>
            <code>{json.dumps(log_data.get('error'), indent=2, ensure_ascii=False)}</code>
            
            ü§ñ <b>–ê–Ω–∞–ª–∏–∑ AIssueGenius:</b>
            {analysis}
            
            #django #error #analysis
        """

        return message.strip()

    def run_analysis_cycle(self, interval_minutes: int = 30):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤...")

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
                logs = self.fetch_django_logs()  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å

                if not logs:
                    logger.info("–ù–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    time.sleep(interval_minutes * 60)
                    continue

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É
                for log in logs:
                    analysis = self.analyze_log(log)
                    message = self.format_analysis_message(log, analysis)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    self.send_telegram_message(message)

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    time.sleep(2)

                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(logs)} –æ—à–∏–±–æ–∫")

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            time.sleep(interval_minutes * 60)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'model_path': "../models/deepseek-coder-1.3b-instruct.Q4_K_M.gguf",
    'telegram_bot_token': "6630832399:AAHs_e3g9C0Uf03DRJCuie2P0bQY_YaVQis",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    'telegram_chat_id': 94486111,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞
    'check_interval_minutes': 30
}

if __name__ == "__main__":
    service = LogAnalyzerService(
        model_path=CONFIG['model_path'],
        telegram_bot_token=CONFIG['telegram_bot_token'],
        telegram_chat_id=CONFIG['telegram_chat_id']
    )

    service.run_analysis_cycle(interval_minutes=CONFIG['check_interval_minutes'])